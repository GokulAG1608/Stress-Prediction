# -*- coding: utf-8 -*-
"""Project SVM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xHSSh7z_czRMW9XoKFrAeEWPQpWaMV28

importing header files
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

"""reading dataset"""

df=pd.read_csv("/content/drive/MyDrive/Colab Notebooks/Stress-Lysis.csv")
df

"""shape of dataset"""

df.shape

"""DATA VISULATION"""

a=df['Humidity']
b=df['Step_count']
plt.ylabel('Step_count')
plt.xlabel('Humidity')
plt.bar(a, b,width = 0.4)
plt.title('STRESS PREDICTION')
plt.legend()
plt.show()


"""test data"""


x=df.iloc[:,[1,2]]
y=df.iloc[:,3]

x

y

"""splitting dataset"""

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test= train_test_split(x, y, test_size= 0.25, random_state=0)

print("training dataset",x_train.shape)
print("training dataset",x_test.shape)

"""feature scaling"""

from sklearn.preprocessing import StandardScaler
st_x= StandardScaler()
x_train= st_x.fit_transform(x_train)
x_test= st_x.transform(x_test)

from sklearn.svm import SVC
classifier=SVC(kernel='linear',random_state=0)
classifier.fit(x_train,y_train)

"""predicting the test result"""

y_pred=classifier.predict(x_test)
y_pred

from sklearn import metrics
print('Accuracy Score : with linear kernal')
print(metrics.accuracy_score(y_test,y_pred))

from sklearn.svm import SVC
classifier=SVC(kernel='rbf')
classifier.fit(x_train,y_train)

"""predicting the test results"""

y_pred=classifier.predict(x_test)

print('Accuracy Score : with default rbf kernal')
print(metrics.accuracy_score(y_test,y_pred))

from sklearn.svm import SVC
classifier=SVC(kernel='rbf',gamma=15,C=7,random_state=0)
classifier.fit(x_train,y_train)

y_pred=classifier.predict(x_test)

print('Accuracy Score on test data: with default rbf kernal')
print(metrics.accuracy_score(y_test,y_pred))

svc=SVC(kernel='poly',degree=4)
svc.fit(x_train,y_train)

y_pred=svc.predict(x_test)

print('Accuracy Score : with poly kernal and degree')
print(metrics.accuracy_score(y_test,y_pred))

"""plotting"""

import matplotlib.pyplot as plt
plt.scatter(x_train[:,0],x_train[:,1],c=y_train)
plt.xlabel("Temperature")
plt.ylabel("Step_count")
plt.title("Training Data")
plt.show()

import matplotlib.pyplot as plt
plt.scatter(x_test[:,0],x_test[:,1],c=y_test)
plt.xlabel("Temperature")
plt.ylabel("Step_count")
plt.title("Test Data")
plt.show()

"""HYPERPLANE"""

from sklearn.svm import SVC
classifier=SVC(kernel='linear',random_state=0)
classifier.fit(x_train,y_train)
y_pred=classifier.predict(x_test)
plt.scatter(x_test[:,0],x_test[:,1],c=y_test)
w=classifier.coef_[0]
a=-w[0]/w[1]
xx=np.linspace(-2.5,2.5)
yy=a*xx-(classifier.intercept_[0])/w[1]
plt.plot(xx,yy)
plt.xlabel("Temperature")
plt.ylabel("Step_count")
plt.title("")
plt.axis("off")
plt.show()

from sklearn.metrics import classification_report
print(classification_report(y_test,y_pred))
